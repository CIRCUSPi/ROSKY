#!/usr/bin/env python
PACKAGE = "opencv_apps"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("use_camera_info", bool_t, 0, "Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used.", False)


gen.add ("white_h_limit_min", int_t, 0, "The white minimum allowed field value Hue", 0, 0, 360)
gen.add ("white_h_limit_max", int_t, 0, "The white maximum allowed field value Hue", 360, 0, 360)
gen.add ("white_s_limit_min", int_t, 0, "The white minimum allowed field value Saturation", 0, 0, 256)
gen.add ("white_s_limit_max", int_t, 0, "The white maximum allowed field value Saturation", 256, 0, 256)
gen.add ("white_v_limit_min", int_t, 0, "The white minimum allowed field value Value", 0, 0, 256)
gen.add ("white_v_limit_max", int_t, 0, "The white maximum allowed field value Value", 256, 0, 256)

gen.add ("yellow_h_limit_min", int_t, 0, "The yellow allowed field value Hue", 0, 0, 360)
gen.add ("yellow_h_limit_max", int_t, 0, "The yellow maximum allowed field value Hue", 360, 0, 360)
gen.add ("yellow_s_limit_min", int_t, 0, "The yellow allowed field value Saturation", 0, 0, 256)
gen.add ("yellow_s_limit_max", int_t, 0, "The yellow allowed field value Saturation", 256, 0, 256)
gen.add ("yellow_v_limit_min", int_t, 0, "The yellow allowed field value Value", 0, 0, 256)
gen.add ("yellow_v_limit_max", int_t, 0, "The yellow allowed field value Value", 256, 0, 256)

gen.add ("red_1_h_limit_min", int_t, 0, "The red_1 minimum allowed field value Hue", 0, 0, 360)
gen.add ("red_1_h_limit_max", int_t, 0, "The red_1 maximum allowed field value Hue", 360, 0, 360)
gen.add ("red_1_s_limit_min", int_t, 0, "The red_1 minimum allowed field value Saturation", 0, 0, 256)
gen.add ("red_1_s_limit_max", int_t, 0, "The red_1 maximum allowed field value Saturation", 256, 0, 256)
gen.add ("red_1_v_limit_min", int_t, 0, "The red_1 minimum allowed field value Value", 0, 0, 256)
gen.add ("red_1_v_limit_max", int_t, 0, "The red_1 maximum allowed field value Value", 256, 0, 256)

gen.add ("red_2_h_limit_min", int_t, 0, "The red_2 minimum allowed field value Hue", 0, 0, 360)
gen.add ("red_2_h_limit_max", int_t, 0, "The red_2 maximum allowed field value Hue", 360, 0, 360)
gen.add ("red_2_s_limit_min", int_t, 0, "The red_2 minimum allowed field value Saturation", 0, 0, 256)
gen.add ("red_2_s_limit_max", int_t, 0, "The red_2 maximum allowed field value Saturation", 256, 0, 256)
gen.add ("red_2_v_limit_min", int_t, 0, "The red_2 minimum allowed field value Value", 0, 0, 256)
gen.add ("red_2_v_limit_max", int_t, 0, "The red_2 maximum allowed field value Value", 256, 0, 256)

gen.add ("top_cutoff", int_t, 0, "The top_cutoff ", 0, 1, 200)
gen.add ("dilation_kernel_size", int_t, 0, "The dilation_kernel_size ", 0, 1, 10)
gen.add ("hough_max_line_gap", int_t, 0, "The hough_max_line_gap ", 0, 1, 10)
gen.add ("hough_min_line_length", int_t, 0, "The hough_min_line_length ", 0, 1, 10)
gen.add ("canny_thresholds_min", int_t, 0, "The canny thresholds_min", 0, 1, 200)
gen.add ("canny_thresholds_max", int_t, 0, "The canny thresholds_max", 0, 1, 200)
gen.add ("hough_thresholds", int_t, 0, "The hough thresholds", 0, 1, 200)


exit(gen.generate(PACKAGE, "line_filter", "rosky_line_filiter"))
