#!/usr/bin/env python
PACKAGE = "rosky_msgs"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#gen.add("use_camera_info", bool_t, 0, "Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used.", False)


gen.add ("mean_d_0", double_t, 0, "Basic parameter for Lane_Filiter_node", 0, -10, 10) #(start, min, max)
gen.add ("mean_phi_0", double_t, 0, "Basic parameter for Lane_Filiter_node", 0, -10, 10) #(start, min, max)
gen.add ("sigma_d_0", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.1, -10, 10) #(start, min, max)
gen.add ("sigma_phi_0", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.1, -10, 10) #(start, min, max)
gen.add ("delta_d", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.02, -10, 10) #(start, min, max)
gen.add ("delta_phi", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.05, -10, 10) #(start, min, max)
gen.add ("d_max", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.3, -10, 10) #(start, min, max)
gen.add ("d_min", double_t, 0, "Basic parameter for Lane_Filiter_node", -0.15, -10, 10) #(start, min, max)
gen.add ("phi_min", double_t, 0, "Basic parameter for Lane_Filiter_node", -1.5, -10, 10) #(start, min, max)
gen.add ("phi_max", double_t, 0, "Basic parameter for Lane_Filiter_node", 1.5, -10, 10) #(start, min, max)
gen.add ("cov_v", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.5, -10, 10) #(start, min, max)
gen.add ("linewidth_while", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.017, 0, 10) #(start, min, max)
gen.add ("linewidth_yellow", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.017, 0, 10) #(start, min, max)
gen.add ("lane_width", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.22, 0, 10) #(start, min, max)
gen.add ("min_max", double_t, 0, "Basic parameter for Lane_Filiter_node", 0.1, 0, 10) #(start, min, max)

gen.add ("use_min_segs", bool_t, 0, "Minimum number of segments for generating measurement for Lane_Filiter_node", False)
gen.add ("min_segs", int_t, 0, "Minimum number of segments for generating measurement for Lane_Filiter_node", 1, 0, 20) #(start, min, max)

gen.add ("use_maximum_segment_dist", bool_t, 0, "maximum segment distance for Lane_Filiter_node", False)
gen.add ("max_segment_dist", double_t, 0, "maximum segment distance for Lane_Filiter_node", 0.3, 0, 20) #(start, min, max)

gen.add ("use_distance_weighting", bool_t, 0, "distance weighting for Lane_Filiter_node", False)
gen.add ("zero_val", int_t, 0, "distance weighting for Lane_Filiter_node", 1, -10, 10) #(start, min, max)
gen.add ("l_peak", int_t, 0, "distance weighting for Lane_Filiter_node", 1, -10, 10) #(start, min, max)
gen.add ("peak_val", int_t, 0, "distance weighting for Lane_Filiter_node", 10, -10, 10) #(start, min, max)
gen.add ("l_max", int_t, 0, "distance weighting for Lane_Filiter_node", 2, -10, 10) #(start, min, max)

gen.add ("use_propagation", bool_t, 0, "use_propagation for Lane_Filiter_node", False)
gen.add ("sigma_d_mask", double_t, 0, "use_propagation for Lane_Filiter_node", 0.05, -10, 10) #(start, min, max)
gen.add ("sigma_phi_mask", double_t, 0, "use_propagation for Lane_Filiter_node", 0.05, -10, 10) #(start, min, max)


exit(gen.generate(PACKAGE, "rosky_msgs", "Lane_Filter_Param"))